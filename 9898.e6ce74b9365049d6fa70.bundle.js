(self.webpackChunkkui_shell=self.webpackChunkkui_shell||[]).push([[9898],{23704:(t,e,r)=>{"use strict";r.r(e),r.d(e,{default:()=>s});var n=r(51173),o=r(34699),a=function(t,e,r,n){return new(r||(r=Promise))((function(o,a){function i(t){try{s(n.next(t))}catch(t){a(t)}}function l(t){try{s(n.throw(t))}catch(t){a(t)}}function s(t){var e;t.done?o(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(i,l)}s((n=n.apply(t,e||[])).next())}))};const i={command:"alert",strict:"alert",example:"alert [<alert type>] [<alert title text>] [--body <alert body text>]",docs:"Alert",required:[{name:"type",docs:"info, success, warning, or error"},{name:"title",docs:"alert title text"}],optional:[{name:"--body",docs:"alert body text"}]};function l(t){const e=t.argvNoOptions,r=t.parsedOptions,a=e[1],i=e[2];if((0,n.isSupportedToolbarTextType)(a))return{react:(0,o.Z)({alert:{type:a,title:i,body:r.body},className:"kui--terminal-alert"})};throw new n.UsageError("alert type must be: 'info', 'success', 'warning' or 'error'.")}const s=t=>a(void 0,void 0,void 0,(function*(){t.listen("/alert",l,{usage:i})}))}}]);